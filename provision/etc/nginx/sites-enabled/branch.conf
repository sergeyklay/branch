upstream branch_app {
    # fail_timeout=0 means we always retry an upstream even if it failed
    # to return a good HTTP response

    # for UNIX domain socket setups
    server unix:/run/branch.sock fail_timeout=0;

    # for a TCP configuration
    # server 192.168.0.7:8000 fail_timeout=0;
}

server {
    listen 80;
    listen 443 ssl http2;

    server_name www.serghei.blog;
    return 301 $scheme://serghei.blog$request_uri;
}

server {
    listen 80;
    listen 443 ssl http2;

    if ($scheme != "https") {
        return 301 https://$host$request_uri;
    }

    server_name serghei.blog;

    # Hide the nginx version.
    server_tokens off;

    charset utf-8;

    # Timeouts
    client_body_timeout 12;
    client_header_timeout 12;
    keepalive_timeout 15;
    send_timeout 10;

    # Buffers
    client_body_buffer_size 10K;
    client_header_buffer_size 1k;
    client_max_body_size 8m;
    large_client_header_buffers 2 1k;

    access_log /var/log/nginx/branch.access.log main;
    error_log  /var/log/nginx/branch.error.log error;

    # Block dot files (.htaccess .htpasswd .svn .git .env and so on).
    location ~ /\. {
        log_not_found off;
        access_log off;
        log_subrequest off;
        return 404;
    }

   # Block (log file, binary, certificate, scripts, sql dump file) access.
    location ~* \.(log|binary|pem|enc|crt|conf|cnf|sql|sh|key|yml|lock|php|aspx)$ {
        log_not_found off;
        access_log off;
        log_subrequest off;
        return 404;
    }

    # Block various admin requests.
    location ~* ^/(?:(?:scm)?admin|(?:desktop)?director|setup|console|manager|courier|remote|owa)/ {
        log_not_found off;
        access_log off;
        log_subrequest off;
        return 404;
    }

    # Block php flooding requests.
    location ~* /(?:t(?:hinkph)?p|tp|php(?:unit)?)/ {
        log_not_found off;
        access_log off;
        log_subrequest off;
        return 404;
    }

    # Block wordpress flooding requests.
    location ~* (?:wp[0-9]*(?:-(?:admin|login|content|includes|comments-post))?|wordpress|xmlrpc) {
        log_not_found off;
        access_log off;
        log_subrequest off;
        return 404;
    }

    # Block common flooding requests I.
    location ~* /(?:client(?:_area)?|stalker(?:_portal)?|dns(?:-query)?|app(?:applications?)?|web(?:site)?|stream(?:ing))/ {
        log_not_found off;
        access_log off;
        log_subrequest off;
        return 404;
    }

    # Block common flooding requests II.
    location ~* /(portal|console|cp?|solr|html|blog|public|test|api|adminx|autodiscover|sit[eo]|news|cms|sqlite|scripts?|mifs|msd|dumper|jenkins)/ {
        log_not_found off;
        access_log off;
        log_subrequest off;
        return 404;
    }

    location ~ ^/(static|media)/ {
        expires 1w;
        gzip_static on;
        autoindex off;

        root /var/www/branch/;
    }

    location = /robots.txt {
        expires 1M;
        gzip_static on;

        root /var/www/branch/static;

        # Disable logging for robots.txt
        access_log off;
        log_subrequest off;
    }

    location ~ ^/(sitemap\.xml|browserconfig\.xml)$ {
        default_type text/xml;

        gzip_static on;

        root /var/www/branch/static;

        # Disable logging for sitemap.xml and browserconfig.xml
        access_log off;
        log_subrequest off;
    }

    location = /site.webmanifest {
        default_type application/json;

        expires max;
        gzip_static on;

        root /var/www/branch/static;

        # Disable logging for site.webmanifest
        access_log off;
        log_subrequest off;
    }

    location ~ ^/(apple-touch-icon(.*)\.png|favicon(.*)\.png|mstile(.*)\.png|android-chrome(.*)\.png)$ {
        default_type image/png;

        expires max;
        gzip_static on;

        root /var/www/branch/static/icons;

        # Disable logging for icons
        access_log off;
        log_subrequest off;
    }

    location = /favicon.ico {
        expires max;
        gzip_static on;

        root /var/www/branch/static/icons;

        # Disable logging for icons
        access_log off;
        log_subrequest off;
    }

    location / {
        # Block php flooding requests
        if ($args ~* "xdebug_session_start=.*") { return 404; }
        if ($args ~* "content=.*php.*") { return 404; }
        if ($args ~* "function=call_user_func_array") { return 404; }

        # checks for static file, if not found proxy to app
        try_files $uri @proxy_to_app;
    }

    location @proxy_to_app {
        proxy_set_header Host $http_host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # we don't want nginx trying to do something clever with
        # redirects, we set the Host: header above already.
        proxy_redirect off;
        proxy_pass http://branch_app;
    }

    # TODO
    # error_page 403 /403.html;
    # error_page 404 /404.html;
    # error_page 500 /500.html;
    # error_page 502 /502.html;
    #
    # location ~ ^/(403|404|500|502).html$ {
    #     root /var/www/branch/static;
    # }
}
